// SPDX-License-Identifier: Apache-2.0

//*
// Copyright (c) 2024  Panasonic Automotive Systems, Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.0
// source: proto/dcm.proto

package dcm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DcmService_DcmGetExecutableAppList_FullMethodName  = "/dcm.DcmService/DcmGetExecutableAppList"
	DcmService_DcmGetAppStatus_FullMethodName          = "/dcm.DcmService/DcmGetAppStatus"
	DcmService_DcmGetRunningAppList_FullMethodName     = "/dcm.DcmService/DcmGetRunningAppList"
	DcmService_DcmRunAppCommand_FullMethodName         = "/dcm.DcmService/DcmRunAppCommand"
	DcmService_DcmRunApp_FullMethodName                = "/dcm.DcmService/DcmRunApp"
	DcmService_DcmRunAppAsync_FullMethodName           = "/dcm.DcmService/DcmRunAppAsync"
	DcmService_DcmStopApp_FullMethodName               = "/dcm.DcmService/DcmStopApp"
	DcmService_DcmStopAppAll_FullMethodName            = "/dcm.DcmService/DcmStopAppAll"
	DcmService_DcmLaunchCompositor_FullMethodName      = "/dcm.DcmService/DcmLaunchCompositor"
	DcmService_DcmLaunchCompositorAsync_FullMethodName = "/dcm.DcmService/DcmLaunchCompositorAsync"
	DcmService_DcmStopCompositor_FullMethodName        = "/dcm.DcmService/DcmStopCompositor"
)

// DcmServiceClient is the client API for DcmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DcmServiceClient interface {
	DcmGetExecutableAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	DcmGetAppStatus(ctx context.Context, in *AppControlRequest, opts ...grpc.CallOption) (*Response, error)
	DcmGetRunningAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	DcmRunAppCommand(ctx context.Context, in *AppCommandRequest, opts ...grpc.CallOption) (*Response, error)
	DcmRunApp(ctx context.Context, in *AppControlRequest, opts ...grpc.CallOption) (*Response, error)
	DcmRunAppAsync(ctx context.Context, in *AppControlRequest, opts ...grpc.CallOption) (*Response, error)
	DcmStopApp(ctx context.Context, in *AppControlRequest, opts ...grpc.CallOption) (*Response, error)
	DcmStopAppAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	DcmLaunchCompositor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	DcmLaunchCompositorAsync(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	DcmStopCompositor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
}

type dcmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDcmServiceClient(cc grpc.ClientConnInterface) DcmServiceClient {
	return &dcmServiceClient{cc}
}

func (c *dcmServiceClient) DcmGetExecutableAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DcmService_DcmGetExecutableAppList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcmServiceClient) DcmGetAppStatus(ctx context.Context, in *AppControlRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DcmService_DcmGetAppStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcmServiceClient) DcmGetRunningAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DcmService_DcmGetRunningAppList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcmServiceClient) DcmRunAppCommand(ctx context.Context, in *AppCommandRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DcmService_DcmRunAppCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcmServiceClient) DcmRunApp(ctx context.Context, in *AppControlRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DcmService_DcmRunApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcmServiceClient) DcmRunAppAsync(ctx context.Context, in *AppControlRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DcmService_DcmRunAppAsync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcmServiceClient) DcmStopApp(ctx context.Context, in *AppControlRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DcmService_DcmStopApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcmServiceClient) DcmStopAppAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DcmService_DcmStopAppAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcmServiceClient) DcmLaunchCompositor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DcmService_DcmLaunchCompositor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcmServiceClient) DcmLaunchCompositorAsync(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DcmService_DcmLaunchCompositorAsync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcmServiceClient) DcmStopCompositor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DcmService_DcmStopCompositor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DcmServiceServer is the server API for DcmService service.
// All implementations must embed UnimplementedDcmServiceServer
// for forward compatibility
type DcmServiceServer interface {
	DcmGetExecutableAppList(context.Context, *Empty) (*Response, error)
	DcmGetAppStatus(context.Context, *AppControlRequest) (*Response, error)
	DcmGetRunningAppList(context.Context, *Empty) (*Response, error)
	DcmRunAppCommand(context.Context, *AppCommandRequest) (*Response, error)
	DcmRunApp(context.Context, *AppControlRequest) (*Response, error)
	DcmRunAppAsync(context.Context, *AppControlRequest) (*Response, error)
	DcmStopApp(context.Context, *AppControlRequest) (*Response, error)
	DcmStopAppAll(context.Context, *Empty) (*Response, error)
	DcmLaunchCompositor(context.Context, *Empty) (*Response, error)
	DcmLaunchCompositorAsync(context.Context, *Empty) (*Response, error)
	DcmStopCompositor(context.Context, *Empty) (*Response, error)
	mustEmbedUnimplementedDcmServiceServer()
}

// UnimplementedDcmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDcmServiceServer struct {
}

func (UnimplementedDcmServiceServer) DcmGetExecutableAppList(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DcmGetExecutableAppList not implemented")
}
func (UnimplementedDcmServiceServer) DcmGetAppStatus(context.Context, *AppControlRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DcmGetAppStatus not implemented")
}
func (UnimplementedDcmServiceServer) DcmGetRunningAppList(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DcmGetRunningAppList not implemented")
}
func (UnimplementedDcmServiceServer) DcmRunAppCommand(context.Context, *AppCommandRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DcmRunAppCommand not implemented")
}
func (UnimplementedDcmServiceServer) DcmRunApp(context.Context, *AppControlRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DcmRunApp not implemented")
}
func (UnimplementedDcmServiceServer) DcmRunAppAsync(context.Context, *AppControlRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DcmRunAppAsync not implemented")
}
func (UnimplementedDcmServiceServer) DcmStopApp(context.Context, *AppControlRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DcmStopApp not implemented")
}
func (UnimplementedDcmServiceServer) DcmStopAppAll(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DcmStopAppAll not implemented")
}
func (UnimplementedDcmServiceServer) DcmLaunchCompositor(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DcmLaunchCompositor not implemented")
}
func (UnimplementedDcmServiceServer) DcmLaunchCompositorAsync(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DcmLaunchCompositorAsync not implemented")
}
func (UnimplementedDcmServiceServer) DcmStopCompositor(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DcmStopCompositor not implemented")
}
func (UnimplementedDcmServiceServer) mustEmbedUnimplementedDcmServiceServer() {}

// UnsafeDcmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DcmServiceServer will
// result in compilation errors.
type UnsafeDcmServiceServer interface {
	mustEmbedUnimplementedDcmServiceServer()
}

func RegisterDcmServiceServer(s grpc.ServiceRegistrar, srv DcmServiceServer) {
	s.RegisterService(&DcmService_ServiceDesc, srv)
}

func _DcmService_DcmGetExecutableAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcmServiceServer).DcmGetExecutableAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcmService_DcmGetExecutableAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcmServiceServer).DcmGetExecutableAppList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcmService_DcmGetAppStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcmServiceServer).DcmGetAppStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcmService_DcmGetAppStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcmServiceServer).DcmGetAppStatus(ctx, req.(*AppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcmService_DcmGetRunningAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcmServiceServer).DcmGetRunningAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcmService_DcmGetRunningAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcmServiceServer).DcmGetRunningAppList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcmService_DcmRunAppCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcmServiceServer).DcmRunAppCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcmService_DcmRunAppCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcmServiceServer).DcmRunAppCommand(ctx, req.(*AppCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcmService_DcmRunApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcmServiceServer).DcmRunApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcmService_DcmRunApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcmServiceServer).DcmRunApp(ctx, req.(*AppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcmService_DcmRunAppAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcmServiceServer).DcmRunAppAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcmService_DcmRunAppAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcmServiceServer).DcmRunAppAsync(ctx, req.(*AppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcmService_DcmStopApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcmServiceServer).DcmStopApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcmService_DcmStopApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcmServiceServer).DcmStopApp(ctx, req.(*AppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcmService_DcmStopAppAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcmServiceServer).DcmStopAppAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcmService_DcmStopAppAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcmServiceServer).DcmStopAppAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcmService_DcmLaunchCompositor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcmServiceServer).DcmLaunchCompositor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcmService_DcmLaunchCompositor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcmServiceServer).DcmLaunchCompositor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcmService_DcmLaunchCompositorAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcmServiceServer).DcmLaunchCompositorAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcmService_DcmLaunchCompositorAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcmServiceServer).DcmLaunchCompositorAsync(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcmService_DcmStopCompositor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcmServiceServer).DcmStopCompositor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcmService_DcmStopCompositor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcmServiceServer).DcmStopCompositor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DcmService_ServiceDesc is the grpc.ServiceDesc for DcmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DcmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dcm.DcmService",
	HandlerType: (*DcmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DcmGetExecutableAppList",
			Handler:    _DcmService_DcmGetExecutableAppList_Handler,
		},
		{
			MethodName: "DcmGetAppStatus",
			Handler:    _DcmService_DcmGetAppStatus_Handler,
		},
		{
			MethodName: "DcmGetRunningAppList",
			Handler:    _DcmService_DcmGetRunningAppList_Handler,
		},
		{
			MethodName: "DcmRunAppCommand",
			Handler:    _DcmService_DcmRunAppCommand_Handler,
		},
		{
			MethodName: "DcmRunApp",
			Handler:    _DcmService_DcmRunApp_Handler,
		},
		{
			MethodName: "DcmRunAppAsync",
			Handler:    _DcmService_DcmRunAppAsync_Handler,
		},
		{
			MethodName: "DcmStopApp",
			Handler:    _DcmService_DcmStopApp_Handler,
		},
		{
			MethodName: "DcmStopAppAll",
			Handler:    _DcmService_DcmStopAppAll_Handler,
		},
		{
			MethodName: "DcmLaunchCompositor",
			Handler:    _DcmService_DcmLaunchCompositor_Handler,
		},
		{
			MethodName: "DcmLaunchCompositorAsync",
			Handler:    _DcmService_DcmLaunchCompositorAsync_Handler,
		},
		{
			MethodName: "DcmStopCompositor",
			Handler:    _DcmService_DcmStopCompositor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dcm.proto",
}
